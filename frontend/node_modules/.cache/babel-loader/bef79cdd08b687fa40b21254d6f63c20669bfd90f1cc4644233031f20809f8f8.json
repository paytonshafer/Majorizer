{"ast":null,"code":"import _regeneratorRuntime from\"/Users/paytonshafer/Desktop/CS350/Majorizer/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/paytonshafer/Desktop/CS350/Majorizer/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/paytonshafer/Desktop/CS350/Majorizer/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{createContext,useState}from\"react\";import jwt_decode from'jwt-decode';import{useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";var AuthContext=/*#__PURE__*/createContext();//Create the context\nexport default AuthContext;//export the context\n//The below is the auth provider, this is what goes in the jsx code\nexport var AuthProvider=function AuthProvider(_ref){var children=_ref.children;//Check if the auth tokens are in local storage otherwise null\nvar _useState=useState(function(){return localStorage.getItem('authTokens')?JSON.parse(localStorage.getItem('authTokens')):null;}),_useState2=_slicedToArray(_useState,2),authTokens=_useState2[0],setAuthTokens=_useState2[1];//check for local auth tokens then get user from them otherwise null\nvar _useState3=useState(function(){return localStorage.getItem('authTokens')?jwt_decode(localStorage.getItem('authTokens')):null;}),_useState4=_slicedToArray(_useState3,2),user=_useState4[0],setUser=_useState4[1];var history=useNavigate();//This allows us to navigate through pages\n//The below function takes care of logging in a user\nvar loginUser=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e){var response,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:e.preventDefault();//stops the default form from being submitted\n//Here we fetch from our api with the username and password to return our auth tokens\n_context.next=3;return fetch('http://127.0.0.1:8000/api/token/',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({'username':e.target.username.value,'password':e.target.password.value})});case 3:response=_context.sent;_context.next=6;return response.json();case 6:data=_context.sent;//This should get the auth tokens if successful\nif(response.status===200){//if response is all good\nsetAuthTokens(data);//set auth tokens\nsetUser(jwt_decode(data.access));//set the user\nlocalStorage.setItem('authTokens',JSON.stringify(data));//put the auth tokens in local storage\nhistory('/home');//navigate the user to home page\n}else{alert('Something went wrong');}case 8:case\"end\":return _context.stop();}},_callee);}));return function loginUser(_x){return _ref2.apply(this,arguments);};}();//This function logs our the user\nvar logoutUser=function logoutUser(){//we set the user and tokens to null and remove the auth tokens from local storage\nsetAuthTokens(null);setUser(null);localStorage.clear();history('/');//navigate the user back to login page\n};//This is the ontext data that we will want to send to different parts of the front end\nvar contextData={user:user,authTokens:authTokens,setAuthTokens:setAuthTokens,setUser:setUser,loginUser:loginUser,logoutUser:logoutUser};//we return the authprovider such that the children of it have acess to the content\nreturn/*#__PURE__*/_jsx(AuthContext.Provider,{value:contextData,children:children});};","map":{"version":3,"names":["createContext","useState","jwt_decode","useNavigate","jsx","_jsx","AuthContext","AuthProvider","_ref","children","_useState","localStorage","getItem","JSON","parse","_useState2","_slicedToArray","authTokens","setAuthTokens","_useState3","_useState4","user","setUser","history","loginUser","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","response","data","wrap","_callee$","_context","prev","next","preventDefault","fetch","method","headers","body","stringify","target","username","value","password","sent","json","status","access","setItem","alert","stop","_x","apply","arguments","logoutUser","clear","contextData","Provider"],"sources":["/Users/paytonshafer/Desktop/CS350/Majorizer/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState} from \"react\";\nimport jwt_decode from 'jwt-decode';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext() //Create the context\n\nexport default AuthContext; //export the context\n\n//The below is the auth provider, this is what goes in the jsx code\nexport const AuthProvider = ({children}) => {\n    //Check if the auth tokens are in local storage otherwise null\n    let [authTokens, setAuthTokens] = useState(()=> localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null)\n    //check for local auth tokens then get user from them otherwise null\n    let [user, setUser] = useState(()=> localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\n\n    const history = useNavigate()//This allows us to navigate through pages\n\n    //The below function takes care of logging in a user\n    let loginUser = async (e) => {\n        e.preventDefault() //stops the default form from being submitted\n        \n        //Here we fetch from our api with the username and password to return our auth tokens\n        let response = await fetch('http://127.0.0.1:8000/api/token/', {\n            method: 'POST',\n            headers:{\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\n        })\n        let data = await response.json() //This should get the auth tokens if successful\n\n        if(response.status === 200){ //if response is all good\n            setAuthTokens(data) //set auth tokens\n            setUser(jwt_decode(data.access)) //set the user\n            localStorage.setItem('authTokens', JSON.stringify(data)) //put the auth tokens in local storage\n            history('/home') //navigate the user to home page\n        }else{alert('Something went wrong')}\n    }\n\n    //This function logs our the user\n    let logoutUser = () => {\n        //we set the user and tokens to null and remove the auth tokens from local storage\n        setAuthTokens(null)\n        setUser(null)\n        localStorage.clear()\n        history('/') //navigate the user back to login page\n    }\n\n    //This is the ontext data that we will want to send to different parts of the front end\n    let contextData = {\n        user: user,\n        authTokens: authTokens,\n        setAuthTokens: setAuthTokens,\n        setUser: setUser,\n        loginUser: loginUser,\n        logoutUser: logoutUser,\n    }\n\n    //we return the authprovider such that the children of it have acess to the content\n    return(\n        <AuthContext.Provider value={contextData}>\n            {children}\n        </AuthContext.Provider>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}